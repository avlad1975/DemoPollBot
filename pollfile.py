import asyncio
import aiogram
import time
import datetime
from aiogram import Dispatcher, types
from constant import tokenpoll, channel_id
from telegram import (
    Bot
)

bot = aiogram.Bot(token=tokenpoll)
bot1 = Bot(tokenpoll)
dp = Dispatcher(bot)
result = [0, 0]  # –∏—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞
timers = 60
questions = ["–í—Ö–æ–¥ –í–í–ï–†–• (–ø–æ–∫—É–ø–∫–∞) üü¢", "–í—Ö–æ–¥ –í–ù–ò–ó (–ø—Ä–æ–¥–∞–∂–∞) üî¥", "–ü—Ä–æ–ø—É—Å–∫–∞—é –≤—Ö–æ–¥ üîµ"]
loop = asyncio.get_event_loop()


@dp.poll_handler(lambda active_quiz: active_quiz)
async def just_poll_answer(active_quiz: types.Poll):
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–æ—Å–∞/–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ï—Å–ª–∏ —É–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ poll.is_closed == True,
    —Ç–æ —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –æ–ø—Ä–æ—Å–æ–º/–≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π, –Ω–∞—Ä–∞–≤–Ω–µ
    —Å poll_answer_handler
    –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Ç–∞–Ω–∏—Ü—ã:
    * active_quiz - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç
    * saved_quiz - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –Ω–∞—Ö–æ–¥—è—â–∞—è—Å—è –≤ –Ω–∞—à–µ–º "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ" –≤ –ø–∞–º—è—Ç–∏
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–æ—Ç, —á—Ç–æ –≤—ã—à–µ, –≤ —á–∞—Å—Ç–∏, –∫–∞—Å–∞—é—â–µ–π—Å—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤ –Ω–∞—à–µ–º "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ".
    :param active_quiz: –æ–±—ä–µ–∫—Ç Poll
    """
    for i in range(2):  # –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞
        result[i] = active_quiz.options[i]['voter_count']


async def close_poll():
    dp.stop_polling()
    await dp.wait_closed()


def start(question):
    global result
    result = [0, 0]
    dt = datetime.datetime.now() + datetime.timedelta(seconds=timers)
    msg = bot1.send_poll(chat_id=channel_id,
                         question=question,
                         is_anonymous=True,
                         options=questions,
                         close_date=time.mktime(dt.timetuple()),
                         allows_multiple_answers=False)
    return msg


async def main(quest):
    start(quest)
    try:
        asyncio.get_event_loop().call_later(timers - 2, lambda: asyncio.ensure_future(close_poll()))
        await loop.create_task(dp.start_polling())
        # executor.start_polling(dp, skip_updates=True)
    except Exception as error:
        print('–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ - ' + str(error))
    finally:
        print(result)
    return result


def poll(quest):
    loop.run_until_complete(main(quest))
    return result

# if __name__ == "__main__":

# loop.close()
