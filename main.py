import os
from selenium.webdriver import ActionChains
from PIL import Image
import parcer
import random
import telebot
import time
import constant
from dataclasses import dataclass, field
from telebot import types
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from constant import token, t_option, screen_url1, screen_url2, channel_id, s_money, \
    t_dogon, cor_time, endpicture, weekstart, endweek, daystart, endday
from messages import second_message, third_message, dogon_message, bug_message, itog_dogon_message, \
    first_message, itog_sec_dogon_message


@dataclass  # –ö–ª–∞—Å—Å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ö—Ä–∞–Ω–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ
class Option:
    name: str = field(default='')  # –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    p_plus: str = field(default='')  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–ª—é—Å
    p_minus: str = field(default='')  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –º–∏–Ω—É—Å
    p_vozvrat: str = field(default='')  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    p_buy: str = field(default='')  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–∫—É–ø–∫–∞
    p_sell: str = field(default='')  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂–∞
    p_dgn: str = field(default='')  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–≥–æ–Ω
    p_bug: str = field(default='')  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–∞–≥
    price: float = field(default=0)  # —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
    itg_price: float = field(default=0)  # —Ü–µ–Ω–∞ –∏—Ç–æ–≥–∞ –æ–ø—Ü–∏–æ–Ω–∞
    itg_price1: float = field(default=0)  # —Ü–µ–Ω–∞ –∏—Ç–æ–≥–∞ –æ–ø—Ü–∏–æ–Ω–∞ –ø—è—Ç–∏–∑–Ω–∞—á–Ω–∞—è
    itg_price2: float = field(default=0)  # —Ü–µ–Ω–∞ –∏—Ç–æ–≥–∞ –æ–ø—Ü–∏–æ–Ω–∞ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω–∞—è
    resume: str = field(default='')  # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞
    em1: str = field(default='')  # —ç–º–æ–¥–∑–∏ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –≤–∞–ª—é—Ç—ã
    em2: str = field(default='')  # —ç–º–æ–¥–∑–∏ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –≤–∞–ª—é—Ç—ã
    plus: bool = field(default=False)  # True, –µ—Å–ª–∏ –æ–ø—Ü–∏–æ–Ω –≤ –ø–ª—é—Å
    minus: bool = field(default=False)  # True, –µ—Å–ª–∏ –æ–ø—Ü–∏–æ–Ω –≤ –º–∏–Ω—É—Å
    vozvrat: bool = field(default=False)  # True, –µ—Å–ª–∏ –æ–ø—Ü–∏–æ–Ω –≤–æ–∑–≤—Ä–∞—Ç
    buy: bool = field(default=False)  # –µ—Å–ª–∏ –æ–ø—Ü–∏–æ–Ω –Ω–∞ –ø–æ–∫—É–ø–∫—É
    dogon2: str = field(default='')  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–≥–æ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    sell: bool = field(default=False)  # True, –µ—Å–ª–∏ –æ–ø—Ü–∏–æ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    dgn: bool = field(default=False)  # True, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ–≥–æ–Ω
    dgn_price: float = field(default=0)  # —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤ –¥–æ–≥–æ–Ω
    dgn_itg: float = field(default=0)  # —Ü–µ–Ω–∞ –∏—Ç–æ–≥–∞ –¥–æ–≥–æ–Ω–∞
    dgn_itg1: float = field(default=0)  # —Ü–µ–Ω–∞ –∏—Ç–æ–≥–∞ –¥–æ–≥–æ–Ω–∞ –ø—è—Ç–∏–∑–Ω–∞—á–Ω–∞—è
    dgn_itg2: float = field(default=0)  # —Ü–µ–Ω–∞ –∏—Ç–æ–≥–∞ –¥–æ–≥–æ–Ω–∞ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω–∞—è
    dgn1: bool = field(default=False)  # True, –µ—Å–ª–∏ –¥–æ–≥–æ–Ω –Ω–∞ 1 –º–∏–Ω
    dgn2: bool = field(default=False)  # True, –µ—Å–ª–∏ –¥–æ–≥–æ–Ω –Ω–∞ 2 –º–∏–Ω
    bug: bool = field(default=False)  # True, –µ—Å–ª–∏ –±—ã–ª —Å–±–æ–π
    bug_text: str = field(default='')  # –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    opt_data: datetime = field(init=False)  # –¥–∞—Ç–∞ –æ–ø—Ü–∏–æ–Ω–∞
    opt_time: datetime = field(init=False)  # –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –æ–ø—Ü–∏–æ–Ω
    dogs_time: datetime = field(init=False)  # –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –¥–æ–≥–æ–Ω
    vh_timer: int = field(default=0)  # –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
    dog_timer: int = field(default=0)  # –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –≤ –¥–æ–≥–æ–Ω
    option_time: int = field(default=0)  # –≤—Ä–µ–º—è –æ–ø—Ü–∏–æ–Ω–∞ –≤ —Å–µ–∫
    str_time: str = field(default='')  # –≤—Ä–µ–º—è –æ–ø—Ü–∏–æ–Ω–∞ —Å–ª–æ–≤–∞–º–∏
    dgn_time: int = field(default=0)  # –≤—Ä–µ–º—è –¥–æ–≥–æ–Ω–∞ –≤ —Å–µ–∫
    str_dgn_time: str = field(default='')  # –≤—Ä–µ–º—è –¥–æ–≥–æ–Ω–∞ —Å–ª–æ–≤–∞–º–∏
    korrect: float = field(default=0)  # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
    round: int = field(default=0)  # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è

    def __post_init__(self):
        self.opt_data = datetime.now()
        self.opt_time = datetime.now()
        self.dog_time = datetime.now()

    def ins_data(self, nname, nresume):  # –≤–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        self.name = nname
        self.resume = nresume
        name_list = next((item for item in s_money if item["name"] == self.name), False)
        if name_list:
            self.em1 = name_list.get('em1')
            self.em2 = name_list.get('em2')
            self.p_plus = name_list.get('plus')
            self.p_minus = name_list.get('minus')
            self.p_buy = name_list.get('buy')
            self.p_sell = name_list.get('sell')
            self.p_dgn = name_list.get('dogon')
            self.p_vozvrat = name_list.get('vozvrat')
            self.p_bug = name_list.get('bug')
            time_option = random.choice(t_option)
            self.option_time = time_option['time']  # –≤—Ä–µ–º—è –æ–ø—Ü–∏–æ–Ω–∞
            self.str_time = time_option['name']
            self.korrect = name_list.get('korrect')
            self.round = name_list.get('round')
            self.dogon2 = name_list.get('dogon2')
        if '–ü–†–û–î–ê–í–ê–¢–¨' in self.resume:
            self.sell = True
        else:
            self.buy = True

    def kor_dogon_price(self):  # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –≤ –¥–æ–≥–æ–Ω
        if self.buy:
            self.dgn_price = round((self.dgn_price - self.korrect), self.round)
        if self.sell:
            self.dgn_price = round((self.dgn_price + self.korrect), self.round)

    def kor_price(self):  # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        if self.buy:
            self.price = round((self.price - self.korrect), self.round)
        if self.sell:
            self.price = round((self.price + self.korrect), self.round)

    def error(self, text):  # –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
        self.bug = True
        self.bug_text = text

    def dogon_itogi(self):  # –≤—ã–±–æ—Ä –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–π —Ü–µ–Ω—ã –∏—Ç–æ–≥–æ–≤
        itogi_dogon = self.dgn_itg1 - self.dgn_price
        if self.buy:
            if itogi_dogon > 0:
                self.dgn_itg = self.dgn_itg1
            else:
                self.dgn_itg = self.dgn_itg1
        elif self.sell:
            if itogi_dogon < 0:
                self.dgn_itg = self.dgn_itg1
            else:
                self.dgn_itg = self.dgn_itg1

    def itogi(self):  # –≤—ã–±–æ—Ä –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–π —Ü–µ–Ω—ã –∏—Ç–æ–≥–æ–≤
        itogi_price = self.itg_price1 - self.price
        if self.buy:
            if itogi_price > 0:
                self.itg_price = self.itg_price1
            else:
                self.itg_price = self.itg_price1
        elif self.sell:
            if itogi_price < 0:
                self.itg_price = self.itg_price1
            else:
                self.itg_price = self.itg_price1

    def comparing_lists(self):  # —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–∞ –æ–ø—Ü–∏–æ–Ω–∞
        itog_price = self.itg_price - self.price
        if itog_price == 0:
            self.vozvrat = True
        elif self.buy:
            if itog_price > 0:
                self.plus = True
            elif itog_price < 0:
                self.dgn = True
        elif self.sell:
            if itog_price < 0:
                self.plus = True
            elif itog_price > 0:
                self.dgn = True

    def timedogon(self):
        tdg = random.choice(t_dogon)
        if tdg['intname'] == 1:
            self.dgn1 = True
        else:
            self.dgn2 = True
        self.dgn_time = tdg['time']
        self.str_dgn_time = tdg['name']


bot = telebot.TeleBot(token)
chrome_options = webdriver.ChromeOptions()
chrome_options.binary_location = os.environ.get("GOOGLE_CHROME_BIN")
chrome_options.add_argument("--headless")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--no-sandbox")


def option_poll():
    questions = ["–¶–µ–Ω–∞ –ø–æ–π–¥—ë—Ç –≤–≤–µ—Ä—Ö üü¢", "–¶–µ–Ω–∞ –ø–æ–π–¥—ë—Ç –≤–Ω–∏–∑ üî¥"]
    message = bot.send_poll(
        channel_id,
        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫—É–¥–∞ –ø–æ–π–¥—ë—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã:",
        questions,
        is_anonymous=True,
        allows_multiple_answers=False,
    )
    # Save some info about the poll the bot_data for later use in receive_poll_answer}


def start_message(day):  # –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    t_message = []

    if day == 0:
        text_message = '<a href="' + weekstart + '">&#8205;</a>'
        text_message = text_message + '<b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ üôã –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –Ω–µ–¥–µ–ª—é ‚òù</b>\n'
        text_message = text_message + '\n<b>–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã üëá</b>\n'
        text_message = text_message + 'https://teletype.in/@smoke_fx/eT7QbEdEB\n'
        text_message = text_message + '\n<i>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ</i> üëá\n'
        text_message = text_message + 'https://t.me/SmokeFXchatbot'
    else:
        text_message = '<a href="' + daystart + '">&#8205;</a>'
        text_message = text_message + '<b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ üåû –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é üìà\n</b>'
        text_message = text_message + '\n<b>–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã üëá</b>\n'
        text_message = text_message + 'https://teletype.in/@smoke_fx/eT7QbEdEB\n'
        text_message = text_message + '\n<i>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ</i> üëá\n'
        text_message = text_message + 'https://t.me/SmokeFXchatbot'
    t_message.append(text_message)
    t_message = '\n'.join(t_message)
    try:
        bot.send_message(channel_id, t_message, disable_web_page_preview=False,
                         parse_mode='HTML')  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as error:
        err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è! - " + str(error)
        print(err_text)


def final_message(day):  # –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    t_message = []
    if day == 4:
        text_message = '<a href="' + endweek + '">&#8205;</a>'
        text_message = text_message + '<b>–ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –Ω–µ–¥–µ–ª—é‚ùï –í—Å–µ–º —Ö–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö üôã</b>\n'
        text_message = text_message + '\n<b>–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã üëá</b>\n'
        text_message = text_message + 'https://teletype.in/@smoke_fx/eT7QbEdEB\n'
        text_message = text_message + '\n<i>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ</i> üëá\n'
        text_message = text_message + 'https://t.me/SmokeFXchatbot'
    else:
        text_message = '<a href="' + endday + '">&#8205;</a>'
        text_message = text_message + '<b>–ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é‚ùï –ü—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–≤—Ç—Ä–∞ –≤ 7-00 –ø–æ –ú–°–ö üïò</b>\n'
        text_message = text_message + '\n<b>–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã üëá</b>\n'
        text_message = text_message + 'https://teletype.in/@smoke_fx/eT7QbEdEB\n'
        text_message = text_message + '\n<i>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ</i> üëá\n'
        text_message = text_message + 'https://t.me/SmokeFXchatbot'
    t_message.append(text_message)
    t_message = '\n'.join(t_message)
    try:
        bot.send_message(channel_id, t_message, disable_web_page_preview=False,
                         parse_mode='HTML')  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as error:
        err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! - " + str(error)
        print(err_text)


def last_message():  # –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    f_message = '<a href="' + endpicture + '">&#8205;</a>'
    f_message = f_message + '<b>–ü–æ–ª—É—á–∞–π –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ Smoke FX! üëå</b>\n'
    f_message = f_message + '\n<i>–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ + –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –ú–¢4 + –±–æ–ª–µ–µ ' \
                            '2–û–û —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –≤ –¥–µ–Ω—å!  üìå</i>\n'
    f_message = f_message + '\n<b>–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –ó–ê–ö–†–´–¢–û–ô –≥—Ä—É–ø–ø—ã:</b>\n'
    f_message = f_message + '\nüëâ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É</b> –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ + —Ä–µ–∑—é–º–µ <b>–ø–æ –∫–∞–∂–¥–æ–π</b> ' \
                            '–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ ‚ùóÔ∏è\n'
    f_message = f_message + 'üëâ –ë–æ–ª–µ–µ <b>2–û–û –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</b> –µ–∂–µ–¥–Ω–µ–≤–Ω–æ + –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚ùï\n'
    f_message = f_message + 'üëâ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É</b> –Ω–∞ –≤—Å–µ <b>–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∫—É—Ä—Å—ã</b> –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã ‚ùï\n'
    f_message = f_message + 'üëâ –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º <b>–ø–æ –æ–±—É—á–µ–Ω–∏—é –æ—Ç Smoke FX</b> (<i> –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –¥–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞ ' \
                            '–Ω–µ —Ä–∞–Ω—å—à–µ 07.07.21 </i>)\n'
    f_message = f_message + '\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É ' \
                            '—Ä—ã–Ω–∫–∞, —Ç–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–π –ü–û–õ–ù–´–ô –¥–æ—Å—Ç—É–ø –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üî• \n'
    f_message = f_message + '\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å –º–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ <b>' \
                            '"–ü–æ–ª—É—á–∏—Ç—å –ü–û–õ–ù–´–ô –¥–æ—Å—Ç—É–ø"</b> ‚ùóÔ∏è\n'
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ü–û–õ–ù–´–ô –¥–æ—Å—Ç—É–ø ‚úÖ", url="https://t.me/SmokeFXchatbot")
    keyboard.add(url_button)
    try:
        bot.send_message(channel_id, text=f_message, disable_web_page_preview=False,
                         parse_mode='HTML', reply_markup=keyboard)  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as error:
        err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! " + str(error)
        print(err_text)


def exit_main(start_time, driver, log_data, itog: int):  # –≤—ã—Ö–æ–¥ –∏–∑ main
    if driver is not None:
        driver.quit()
    itog_time = datetime.now() - start_time
    result = [int(itog_time.total_seconds()), log_data.name, log_data.minus, itog]
    return result


def mouse_move(action, element):
    action.move_to_element(element).perform()
    action.move_by_offset(xoffset=200, yoffset=200).perform()
    action.move_to_element(element).perform()


def screenshot(driver):  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    try:
        element = driver.find_element_by_xpath('/html/body/div[2]/div[1]')
        try:
            element.screenshot("shot.png")
            img = Image.open("shot.png")
            img = img.crop((0, constant.y1crop, constant.xcrop, constant.ycrop))
            # img = img.crop((0, 0, 1427, 800))
            img.save("screenshot.png")
            return 0
        except Exception as error:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ - " + str(error))
            return 1
    except NoSuchElementException:
        print('–ù–µ –º–æ–≥—É —Å–Ω—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç')
        return 1


def itog_second_dogon_message(
        log_data):  # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ç–æ–≥–µ –¥–æ–≥–æ–Ω–∞ –¥–ª—è –∏—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞(–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    dgn_res = 0
    if log_data.buy:
        dgn_res = log_data.dgn_itg - log_data.dgn_price
    elif log_data.sell:
        dgn_res = log_data.dgn_price - log_data.dgn_itg
    if dgn_res > 0:
        log_data.plus = True  # –í–Ω–µ—Å–µ–Ω–∏–µ –≤ –ª–æ–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ü–õ–Æ–°
        return True
    else:
        log_data.minus = True
        # print('–ú–∏–Ω—É—Å')
        return False


def main(val_name):
    strprice = ''
    volute_text = None
    driver = None
    log_data = Option()
    start_time = datetime.now()  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        driver = webdriver.Chrome(executable_path=os.environ.get("CHROMEDRIVER_PATH"), chrome_options=chrome_options)
        # driver = webdriver.Chrome(chrome_options=chrome_options)
        time.sleep(8)
    except Exception as error:
        print("–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ - " + str(error))
        log_data.error("–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞")
        return exit_main(start_time, driver, log_data, 0)
    i = 0
    try:
        while i < 1:
            vol = parcer.parse('name')
            while len(vol) == 0:
                vol = parcer.parse('name')
            if len(vol) == 1 and vol[0]['name'] != val_name:
                i = 1
                volute_text = vol[0]
            elif len(vol) > 1:
                j = 0
                while j < 1:
                    volute_text = random.choice(vol)  # –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ü–∏–æ–Ω–∞
                    if volute_text['name'] == val_name:
                        j = 0
                    else:
                        j = 1
                        i = 1
            else:
                i = 0
    except Exception as error:
        print("–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ 2 - " + str(error))
        log_data.error("–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ 2")
        return exit_main(start_time, driver, log_data, 0)
    log_data.ins_data(volute_text['name'], volute_text['resume'].upper())
    volute = log_data.name.replace('/', '')
    it = 0
    while it < 10:
        try:
            driver.get(screen_url1 + volute + screen_url2 + volute)  # –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏
            time.sleep(5)
            # driver.set_window_size(5000, 3100)
            driver.set_window_size(1552, 840)
            driver.find_element_by_xpath(
                "/html/body/div[2]/div[1]/div/div[1]/div/table/tr[1]/td[2]/div/div[1]/div[2]"
                "/div[2]/div[2]/div[1]/div[1]/div[1]").click()
            time.sleep(2)
            driver.find_element_by_xpath(
                "/html/body/div[2]/div[3]/div/div/div[1]/div/div/div/div/div/div[5]/div/div").click()
            time.sleep(2)
            str_indicator = driver.find_element_by_class_name("input-3n5_2-hI")
            str_indicator.send_keys('Donchian Channels')
            driver.find_element_by_class_name('title-1gYObTuJ').click()
            str_indicator.clear()
            str_indicator.send_keys('Pivot Points High Low')
            driver.find_element_by_class_name('title-1gYObTuJ').click()
            driver.find_element_by_class_name('close-2sL5JydP').click()
            time.sleep(2)
            strprice = driver.find_element_by_xpath(' html / body / div[2] / div[1] / div[1] / div[1] '
                                                    '/ div / table / tr[1] / td[2] / div / div[1] / div[1] / div / \
              div[2] / div / div[5] / div[2]')
            it = 10
        except Exception as error:
            print("–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ - " + str(error))
            it += 1
            print(it)
    try:
        t1 = datetime.now() + timedelta(hours=cor_time)  # –í–†–ï–ú–Ø –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –û–ü–¶–ò–û–ù–ê
        bot.send_message(channel_id, first_message(log_data),
                         disable_web_page_preview=False,
                         parse_mode='HTML')  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as error:
        err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! - " + str(error)
        print(err_text)
        log_data.error(err_text)
        return exit_main(start_time, driver, log_data, 0)

    i_color = 0
    # –ø–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –ü–û–ö–£–ü–ê–¢–¨
    if '–ü–û–ö–£–ü–ê–¢–¨' in log_data.resume:
        while i_color == 0:
            mouse_move(ActionChains(driver), strprice)
            tp = str(strprice.value_of_css_property("color"))
            if '38' in tp:
                i_color = 1
            else:
                i_color = 0
    # –ø–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –ü–†–û–î–ê–í–ê–¢–¨
    elif '–ü–†–û–î–ê–í–ê–¢–¨' in log_data.resume:
        while i_color == 0:
            mouse_move(ActionChains(driver), strprice)
            tp = str(strprice.value_of_css_property("color"))
            if '239' in tp:
                i_color = 1
            else:
                i_color = 0
    try:
        price = float(strprice.text)
        log_data.opt_time = (datetime.now() + timedelta(hours=cor_time))  # –í–Ω–µ—Å–µ–Ω–∏–µ –≤ –ª–æ–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –í–†–ï–ú–Ø
        log_data.vh_timer = (log_data.opt_time - t1).seconds  # –í–Ω–µ—Å–µ–Ω–∏–µ–í–†–ï–ú–Ø –ü–û–ò–°–ö–ê –¢–û–ß–ö–ò –í–•–û–î–ê, –°
        if price <= 0:
            err_text = "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã"
            print(err_text)
            log_data.error(err_text)
            return exit_main(start_time, driver, log_data, 0)
    except ValueError:
        err_text = "–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã"
        log_data.error(err_text)
        return exit_main(start_time, driver, log_data, 0)
    log_data.price = price
    log_data.kor_price()
    if screenshot(driver) == 1:
        err_text = "–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
        print(err_text)
    try:
        img = open('screenshot.png', 'rb')
        bot.send_photo(channel_id, img, caption=second_message(log_data), parse_mode='HTML')
    except Exception as error:
        err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! - " + str(error)
        bug_message(log_data.p_bug, bot, channel_id)
        print(err_text)
        log_data.error(err_text)
        return exit_main(start_time, driver, log_data, 0)
    option_poll()
    time.sleep(log_data.option_time)  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç 3 –¥–æ 5 –º–∏–Ω—É—Ç
    try:
        mouse_move(ActionChains(driver), strprice)
        log_data.itg_price1 = float(strprice.text)  # –∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –æ–ø—Ü–∏–æ–Ω–∞ –ø—è—Ç–∏–∑–Ω–∞—á–Ω–∞—è
        log_data.itogi()
    except ValueError:
        err_text = '–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'
        bug_message(log_data.p_bug, bot, channel_id)
        print(err_text)
        log_data.error(err_text)
        return exit_main(start_time, driver, log_data, 0)
    log_data.comparing_lists()  # –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –æ–ø—Ü–∏–æ–Ω–∞
    if log_data.dgn:  # –≤–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–Ω–∞
        log_data.timedogon()
        message_text = dogon_message(log_data)
        try:
            t3 = datetime.now() + timedelta(hours=cor_time)  # –í–Ω–µ—Å–µ–Ω–∏–µ –≤ –ª–æ–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –í–†–ï–ú–Ø –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –î–û–ì–û–ù–ê
            bot.send_message(channel_id, message_text, disable_web_page_preview=False,
                             parse_mode='HTML')
        except Exception as error:
            err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–≥–æ–Ω–µ! - " + str(error)
            bug_message(log_data.p_bug, bot, channel_id)
            print(err_text)
            log_data.error(err_text)
            return exit_main(start_time, driver, log_data, 0)
        time.sleep(10)
        i_color = 0
        if log_data.buy:
            while i_color == 0:
                mouse_move(ActionChains(driver), strprice)
                tp = str(strprice.value_of_css_property("color"))
                if '38' in tp:
                    i_color = 1
                else:
                    i_color = 0
        # –ø–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –ü–†–û–î–ê–í–ê–¢–¨
        elif log_data.sell:
            while i_color == 0:
                mouse_move(ActionChains(driver), strprice)
                tp = str(strprice.value_of_css_property("color"))
                if '239' in tp:
                    i_color = 1
                else:
                    i_color = 0
        try:
            if screenshot(driver) == 1:
                err_text = "–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
                print(err_text)
            log_data.dgn_price = float(strprice.text)
            log_data.kor_dogon_price()
            log_data.dogs_time = datetime.now() + timedelta(
                hours=cor_time)  # –í–Ω–µ—Å–µ–Ω–∏–µ –≤ –ª–æ–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –í–†–ï–ú–Ø –û–¢–ö–†–´–¢–ò–Ø –î–û–ì–û–ù–ê
            log_data.dog_timer = (log_data.dogs_time - t3).seconds  # –í–†–ï–ú–Ø –ü–û–ò–°–ö–ê –¢–û–ß–ö–ò –í–•–û–î–ê –î–û–ì–û–ù–ê, –°
            if screenshot(driver) == 1:
                err_text = "–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
                print(err_text)
            try:
                img = open('screenshot.png', 'rb')
                bot.send_photo(channel_id, img, caption=dogon_message(log_data), parse_mode='HTML')
            except Exception as error:
                err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–≥–æ–Ω–µ - " + str(error)
                bug_message(log_data.p_bug, bot, channel_id)
                print(err_text)
                log_data.error(err_text)
                return exit_main(start_time, driver, log_data, 0)
        except Exception as error:
            err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–≥–æ–Ω–µ! - " + str(error)
            bug_message(log_data.p_bug, bot, channel_id)
            print(err_text)
            log_data.error(err_text)
            return exit_main(start_time, driver, log_data, 0)
        time.sleep(log_data.dgn_time)
    else:
        if screenshot(driver) == 1:
            err_text = "–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
            print(err_text)
        try:
            img = open('screenshot.png', 'rb')
            bot.send_photo(channel_id, img, caption=third_message(log_data), parse_mode='HTML')
            return exit_main(start_time, driver, log_data, 1)
        except Exception as error:
            err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! - " + str(error)
            bug_message(log_data.p_bug, bot, channel_id)
            print(err_text)
            log_data.error(err_text)
            return exit_main(start_time, driver, log_data, 0)
    if log_data.dgn:
        try:
            mouse_move(ActionChains(driver), strprice)
            log_data.dgn_itg1 = float(strprice.text)
        except ValueError:
            err_text = '–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –∏—Ç–æ–≥–æ–≤ –¥–æ–≥–æ–Ω–∞'
            bug_message(log_data.p_bug, bot, channel_id)
            print(err_text)
            log_data.error(err_text)
            return exit_main(start_time, driver, log_data, 0)
        log_data.dogon_itogi()
        if screenshot(driver) == 1:
            err_text = "–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
            print(err_text)
        try:
            img = open('screenshot.png', 'rb')
            bot.send_photo(channel_id, img, caption=itog_dogon_message(log_data), parse_mode='HTML')
            # return exit_main(start_time, driver, log_data, 1)
        except Exception as error:
            err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤ –¥–æ–≥–æ–Ω–∞! - " + str(error)
            bug_message(log_data.p_bug, bot, channel_id)
            print(err_text)
            log_data.error(err_text)
            return exit_main(start_time, driver, log_data, 0)
    if log_data.minus:
        time.sleep(random.randint(150, 360))
        try:
            bot.send_message(channel_id, itog_sec_dogon_message(log_data), disable_web_page_preview=False,
                             parse_mode='HTML')
        except Exception as error:
            err_text = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤ –¥–æ–≥–æ–Ω–∞! - " + str(error)
            print(err_text)
            log_data.error(err_text)
            return exit_main(start_time, driver, log_data, 0)
    return exit_main(start_time, driver, log_data, 1)


def mainbot():
    main('EUR/RUB')
    last_message()


if __name__ == '__main__':
    mainbot()
